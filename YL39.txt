#define __SFR_OFFSET 0x00
#include "avr/io.h"

; Juan Jonathan_2106704894

.global main      ; Harus ada agar .ino bisa kosong

main:             
  LDI R20, 0xFF   ; Load 0b11111111 ke R16
  OUT DDRD, R20   ; Load ke DDRD agar PORTD output semua
  SBI DDRC, 2     ; Set PC2 sebagai pin variable resistor (Analog 2)

setup_adc:
  LDI R20, 0b01000010   ; Vref = AVcc, pin ADC nya A2, left justified
  STS ADMUX, R20  ; Store ke ADMUX isi R20
  LDI R20, 0x87   ; Set flag enable dan prescale CLK/128
  STS ADCSRA, R20 ; Store ke ADCSRA isi R20

start_conversion:
  LDI R20, 0xC7   ; Set flag start conversion
  STS ADCSRA, R20 ; Store ke ADCSRA isi R16

wait_conversion:
  LDS R21, ADCSRA ; Load isi control dan status register ADC ke R21
  SBRS R21, 4     ; Cek bit ke 4 apakah 1 (flag conversion selesai)
  RJMP wait_conversion  ; Jika blm selesai, loop

  LDI R16, 0xD7   ; Set flag ADIF
  STS ADCSRA, R16 ; ADIF akan diclear

  LDS R17, ADCL   ; Load isi low bits ADC ke R16
  LDS R16, ADCH   ; Load isi high bits ADC ke R17

  call convert_result ; Call subroutine mengubah hasil ADC ke nyala - nyala LED
  RJMP start_conversion ; Loop balik ke start_conversion

convert_result:
  MOV R21, R17    ; Copy ke R21 agar isi R17 tidak terubah
  CPI R21, 255    ; Compare ADCL dengan 255 berarti 1024 untuk keseluruhan 10 bit
  BRSH n5         ; Jika total 10 bit ADC >= 1024 branch ke n5
  MOV R21, R17    ; Copy ke R21 agar isi R17 tidak terubah
  CPI R21, 64     ; Compare ADCL dengan 64 berarti 256 untuk keseluruhan 10 bit
  BRSH n4         ; Jika total 10 bit ADC >= 256 branch ke n4
  MOV R21, R17    ; Copy ke R21 agar isi R17 tidak terubah
  CPI R21, 16     ; Compare ADCL dengan 16 berarti 64 untuk keseluruhan 10 bit
  BRSH n3         ; Jika total 10 bit ADC >= 64 branch ke n3
  MOV R21, R17    ; Copy ke R21 agar isi R17 tidak terubah
  CPI R21, 4      ; Compare ADCL dengan 4 berarti 16 untuk keseluruhan 10 bit
  BRSH n2         ; Jika total 10 bit ADC >= 16 branch ke n2
  MOV R21, R16    ; Copy ke R21 agar isi R16 tidak terubah
  CPI R16, 0      ; Compare ADCL dengan 0 berarti 0 untuk keseluruhan 10 bit
  BRSH n1         ; Jika total 10 bit ADC >= 0 branch ke n2
  RET

n0:
  LDI R16, 0      ; Load 0 ke R16
  OUT PORTD, R16  ; Matikan semua LED
  RJMP start_conversion ; Jump kembali ke start_conversion

n1:
  LDI R16, 0b00100000 ; Load binary 00000000 ke R16
  OUT PORTD, R16      ; Nyalakan LED tengah 
  RJMP start_conversion ; Jump kembali ke start_conversion

n2:
  LDI R16, 0b00110000 ; Load binary 00111000 ke R16
  OUT PORTD, R16      ; Nyalakan 3 LED tengah 
  RJMP start_conversion ; Jump kembali ke start_conversion

n3:
  LDI R16, 0b00111000 ; Load binary 01111100 ke R16
  OUT PORTD, R16      ; Nyalakan 5 LED tengah 
  RJMP start_conversion ; Jump kembali ke start_conversion

n4:
  LDI R16, 0b00111100 ; Load binary 11111110 ke R16
  OUT PORTD, R16      ; Nyalakan 7 LED tengah 
  RJMP start_conversion ; Jump kembali ke start_conversion

n5:
  LDI R16, 0b00111110 ; Load binary 11111111 ke R16
  OUT PORTD, R16      ; Nyalakan semua LED di PORT D
  RJMP start_conversion ; Jump kembali ke start_conversion
